// define state
state = void

// define listeners
on_loop = {
    // returns a single frame of the animation
    frame = {n ->

      // message to display
      message = "                HELLO WORLD                "

      // the visible part of the message, as a list
      message = (map (range n) {item i -> <- (get message i)})

      // convert back to string
      message = (reduce message {acc item i -> <- (join acc item)} "")

      // add car
      <- (join message "ō͡≡o")
    }

    // calculate frame number
    frame_number = (add (remainder loop_count 40) 1)

    // clear when animation loop
    (if (is frame_number 1) {(print "\e[H\e[J")})

    // \e[H goes to top left
    (print (join "\e[H" "Frame: " (string frame_number) "\n\n"))

    // get color escape code
    color_code = (join "\e[" (string (add 31 (remainder frame_number 7))) "m")

    // print frame
    // \e[0m resets color
    (print (join color_code (frame frame_number) "\e[0m\n"))

    // print floor
    (print "‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n")

    // wait to slow down animation
    (wait 0.1)

    <- state
  }

listeners = (list (list
  void // state
  on_loop //loop
  void // keypress
  void // move
  void // click
))

// set up: hide cursor and clear
(print "\e[?25l\e[2J\e[H")

// event loop
(use "./event-loop.crumb" {
  <- (start state listeners)
})

// tear down: show cursor and clear
(print "\e[?25h\e[2J\e[H")
